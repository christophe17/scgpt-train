.PHONY: help install sync update clean clean-logs format test test-full train train-mnist lint typecheck quality

help:  ## Show help
	@grep -E '^[.a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

install: ## Install dependencies with uv
	uv sync

sync: ## Sync dependencies with uv (install/update based on pyproject.toml)
	uv sync

update: ## Update all dependencies to latest versions
	uv sync --upgrade

clean: ## Clean autogenerated files
	rm -rf dist
	rm -rf .venv
	find . -type f -name "*.DS_Store" -ls -delete
	find . | grep -E "(__pycache__|\.pyc|\.pyo)" | xargs rm -rf
	find . | grep -E ".pytest_cache" | xargs rm -rf
	find . | grep -E ".ipynb_checkpoints" | xargs rm -rf
	rm -f .coverage

clean-logs: ## Clean logs
	rm -rf logs/**

format: ## Run pre-commit hooks
	uv run pre-commit run -a

lint: ## Run linting with ruff
	uv run ruff check src/ --fix

typecheck: ## Run type checking with mypy
	uv run mypy src/

quality: lint typecheck ## Run all code quality checks

test: ## Run not slow tests
	uv run pytest -k "not slow"

test-full: ## Run all tests
	uv run pytest

train: ## Train the model with default config
	uv run python -m src.train

train-mnist: ## Train MNIST model
	uv run python -m src.train_scgpt --config-name train_scgpt

train-debug: ## Train with debugging (1 epoch, small batch)
	uv run python -m src.train trainer.max_epochs=1 datamodule.loaders.train.batch_size=32

eval: ## Evaluate the model
	uv run python -m src.eval

git-sync: ## Merge changes from main branch to your current branch
	git pull
	git pull origin main

# Development shortcuts
dev: install ## Setup development environment
	uv run pre-commit install

run: ## Run any command with uv (usage: make run CMD="python script.py")
	uv run $(CMD)